;
; NOTE: Please do not change any values in this file!
; Comment out the old value, and through the new one at THE END OF THIS FILE. <3
;
[mysqld]
innodb_file_per_table=1
default-storage-engine=MyISAM

;
; You can check the performance of the key buffer by issuing a SHOW STATUS statement and examining the Key_read_requests, Key_reads, Key_write_requests, and Key_writes status variables.
;
; The Key_reads/Key_read_requests ratio should normally be less than 0.01.
; The Key_writes/Key_write_requests ratio is usually near 1 if you are using mostly updates and deletes,
; but might be much smaller if you tend to do updates that affect many rows at the same time or if you are using the DELAY_KEY_WRITE table option.
;
; on a system whose primary function is to run MySQL using the MyISAM storage engine, 25% of the machine's total memory is an acceptable value for this variable.
; * 5.1.4 -> key_buffer_size
;
key_buffer_size=768M

;
; The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires.
; (1024 should be more then enough!)
;
table_open_cache=1024

;
; Each session that needs to do a sort allocates a buffer of this size. sort_buffer_size is not specific to any storage engine and applies in a general manner for optimization.
;
; If you see many Sort_merge_passes per second in SHOW GLOBAL STATUS output, you can consider increasing the sort_buffer_size value to speed up ORDER BY
; or GROUP BY operations that cannot be improved with query optimization or improved indexing.
sort_buffer_size=4M

;
; The amount of memory allocated for caching query results. The default value is 0, which disables the query cache
; Be careful not to set the size of the cache too large. Due to the need for threads to lock the cache during updates, you may see lock contention issues with a very large cache.
;
query_cache_size=128M

;
; The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans
;
; Normally, the best way to get fast joins is to add indexes. Increase the value of join_buffer_size to get a faster full join when adding indexes is not possible.
;
join_buffer_size=192K

;
; Do not cache results that are larger than this number of bytes. (default is 1M)
;
query_cache_limit=1M

;
; At the very least, thread_cache_size should be greater than Max_used_connections.
;  ==> SHOW GLOBAL STATUS LIKE 'Max_used_connections';
;      (12)
; Default value: 4
thread_cache_size = 12

;
; table_cache depends on the amount of connections we will have, and how many tables are
; accessed at one time.
;
;; Table cache hit rate: 1% (1K open / 76K opened)
table_cache = 50000

;
; We have just over 300MB of InnoDB databases. Make a pool that is slightly larger then this
; Mixed with our table cache, this will allow faster queries to be performed.
;
innodb_buffer_pool_size = 384M



;
; The maximum size of internal in-memory temporary tables. Please see
;   http://www.pythian.com/blog/how-and-why-tmp_table_size-and-max_heap_table_size-are-bounded/
;
tmp_table_size = 16M
max_heap_table_size = 32M
open_files_limit=8946

slow_query_log = 1
long_query_time = 5
